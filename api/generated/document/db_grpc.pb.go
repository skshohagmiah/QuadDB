// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: db.proto

package document

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentService_CreateCollection_FullMethodName  = "/document.DocumentService/CreateCollection"
	DocumentService_DropCollection_FullMethodName    = "/document.DocumentService/DropCollection"
	DocumentService_ListCollections_FullMethodName   = "/document.DocumentService/ListCollections"
	DocumentService_GetCollectionInfo_FullMethodName = "/document.DocumentService/GetCollectionInfo"
	DocumentService_InsertOne_FullMethodName         = "/document.DocumentService/InsertOne"
	DocumentService_InsertMany_FullMethodName        = "/document.DocumentService/InsertMany"
	DocumentService_FindOne_FullMethodName           = "/document.DocumentService/FindOne"
	DocumentService_FindMany_FullMethodName          = "/document.DocumentService/FindMany"
	DocumentService_UpdateOne_FullMethodName         = "/document.DocumentService/UpdateOne"
	DocumentService_UpdateMany_FullMethodName        = "/document.DocumentService/UpdateMany"
	DocumentService_DeleteOne_FullMethodName         = "/document.DocumentService/DeleteOne"
	DocumentService_DeleteMany_FullMethodName        = "/document.DocumentService/DeleteMany"
	DocumentService_ReplaceOne_FullMethodName        = "/document.DocumentService/ReplaceOne"
	DocumentService_UpsertOne_FullMethodName         = "/document.DocumentService/UpsertOne"
	DocumentService_Aggregate_FullMethodName         = "/document.DocumentService/Aggregate"
	DocumentService_Count_FullMethodName             = "/document.DocumentService/Count"
	DocumentService_Distinct_FullMethodName          = "/document.DocumentService/Distinct"
	DocumentService_CreateIndex_FullMethodName       = "/document.DocumentService/CreateIndex"
	DocumentService_DropIndex_FullMethodName         = "/document.DocumentService/DropIndex"
	DocumentService_ListIndexes_FullMethodName       = "/document.DocumentService/ListIndexes"
	DocumentService_BulkWrite_FullMethodName         = "/document.DocumentService/BulkWrite"
	DocumentService_BeginTransaction_FullMethodName  = "/document.DocumentService/BeginTransaction"
	DocumentService_CommitTransaction_FullMethodName = "/document.DocumentService/CommitTransaction"
	DocumentService_AbortTransaction_FullMethodName  = "/document.DocumentService/AbortTransaction"
)

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DocumentService provides MongoDB/Cassandra-like document database operations
type DocumentServiceClient interface {
	// Collection management
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error)
	DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*DropCollectionResponse, error)
	ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error)
	GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error)
	// Document operations
	InsertOne(ctx context.Context, in *InsertOneRequest, opts ...grpc.CallOption) (*InsertOneResponse, error)
	InsertMany(ctx context.Context, in *InsertManyRequest, opts ...grpc.CallOption) (*InsertManyResponse, error)
	FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error)
	FindMany(ctx context.Context, in *FindManyRequest, opts ...grpc.CallOption) (*FindManyResponse, error)
	UpdateOne(ctx context.Context, in *UpdateOneRequest, opts ...grpc.CallOption) (*UpdateOneResponse, error)
	UpdateMany(ctx context.Context, in *UpdateManyRequest, opts ...grpc.CallOption) (*UpdateManyResponse, error)
	DeleteOne(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeleteOneResponse, error)
	DeleteMany(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeleteManyResponse, error)
	ReplaceOne(ctx context.Context, in *ReplaceOneRequest, opts ...grpc.CallOption) (*ReplaceOneResponse, error)
	UpsertOne(ctx context.Context, in *UpsertOneRequest, opts ...grpc.CallOption) (*UpsertOneResponse, error)
	// Aggregation operations
	Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error)
	Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	Distinct(ctx context.Context, in *DistinctRequest, opts ...grpc.CallOption) (*DistinctResponse, error)
	// Index management
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*DropIndexResponse, error)
	ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error)
	// Batch operations
	BulkWrite(ctx context.Context, in *BulkWriteRequest, opts ...grpc.CallOption) (*BulkWriteResponse, error)
	// Transaction support
	BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*BeginTransactionResponse, error)
	CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommitTransactionResponse, error)
	AbortTransaction(ctx context.Context, in *AbortTransactionRequest, opts ...grpc.CallOption) (*AbortTransactionResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*CreateCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCollectionResponse)
	err := c.cc.Invoke(ctx, DocumentService_CreateCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*DropCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropCollectionResponse)
	err := c.cc.Invoke(ctx, DocumentService_DropCollection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) ListCollections(ctx context.Context, in *ListCollectionsRequest, opts ...grpc.CallOption) (*ListCollectionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCollectionsResponse)
	err := c.cc.Invoke(ctx, DocumentService_ListCollections_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetCollectionInfo(ctx context.Context, in *GetCollectionInfoRequest, opts ...grpc.CallOption) (*GetCollectionInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectionInfoResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetCollectionInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) InsertOne(ctx context.Context, in *InsertOneRequest, opts ...grpc.CallOption) (*InsertOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertOneResponse)
	err := c.cc.Invoke(ctx, DocumentService_InsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) InsertMany(ctx context.Context, in *InsertManyRequest, opts ...grpc.CallOption) (*InsertManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertManyResponse)
	err := c.cc.Invoke(ctx, DocumentService_InsertMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) FindOne(ctx context.Context, in *FindOneRequest, opts ...grpc.CallOption) (*FindOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindOneResponse)
	err := c.cc.Invoke(ctx, DocumentService_FindOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) FindMany(ctx context.Context, in *FindManyRequest, opts ...grpc.CallOption) (*FindManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindManyResponse)
	err := c.cc.Invoke(ctx, DocumentService_FindMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) UpdateOne(ctx context.Context, in *UpdateOneRequest, opts ...grpc.CallOption) (*UpdateOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOneResponse)
	err := c.cc.Invoke(ctx, DocumentService_UpdateOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) UpdateMany(ctx context.Context, in *UpdateManyRequest, opts ...grpc.CallOption) (*UpdateManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateManyResponse)
	err := c.cc.Invoke(ctx, DocumentService_UpdateMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DeleteOne(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeleteOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOneResponse)
	err := c.cc.Invoke(ctx, DocumentService_DeleteOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DeleteMany(ctx context.Context, in *DeleteManyRequest, opts ...grpc.CallOption) (*DeleteManyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteManyResponse)
	err := c.cc.Invoke(ctx, DocumentService_DeleteMany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) ReplaceOne(ctx context.Context, in *ReplaceOneRequest, opts ...grpc.CallOption) (*ReplaceOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceOneResponse)
	err := c.cc.Invoke(ctx, DocumentService_ReplaceOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) UpsertOne(ctx context.Context, in *UpsertOneRequest, opts ...grpc.CallOption) (*UpsertOneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertOneResponse)
	err := c.cc.Invoke(ctx, DocumentService_UpsertOne_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AggregateResponse)
	err := c.cc.Invoke(ctx, DocumentService_Aggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) Count(ctx context.Context, in *CountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, DocumentService_Count_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) Distinct(ctx context.Context, in *DistinctRequest, opts ...grpc.CallOption) (*DistinctResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistinctResponse)
	err := c.cc.Invoke(ctx, DocumentService_Distinct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, DocumentService_CreateIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*DropIndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DropIndexResponse)
	err := c.cc.Invoke(ctx, DocumentService_DropIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) ListIndexes(ctx context.Context, in *ListIndexesRequest, opts ...grpc.CallOption) (*ListIndexesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIndexesResponse)
	err := c.cc.Invoke(ctx, DocumentService_ListIndexes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) BulkWrite(ctx context.Context, in *BulkWriteRequest, opts ...grpc.CallOption) (*BulkWriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BulkWriteResponse)
	err := c.cc.Invoke(ctx, DocumentService_BulkWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*BeginTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BeginTransactionResponse)
	err := c.cc.Invoke(ctx, DocumentService_BeginTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) CommitTransaction(ctx context.Context, in *CommitTransactionRequest, opts ...grpc.CallOption) (*CommitTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitTransactionResponse)
	err := c.cc.Invoke(ctx, DocumentService_CommitTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) AbortTransaction(ctx context.Context, in *AbortTransactionRequest, opts ...grpc.CallOption) (*AbortTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortTransactionResponse)
	err := c.cc.Invoke(ctx, DocumentService_AbortTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility.
//
// DocumentService provides MongoDB/Cassandra-like document database operations
type DocumentServiceServer interface {
	// Collection management
	CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error)
	DropCollection(context.Context, *DropCollectionRequest) (*DropCollectionResponse, error)
	ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error)
	GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoResponse, error)
	// Document operations
	InsertOne(context.Context, *InsertOneRequest) (*InsertOneResponse, error)
	InsertMany(context.Context, *InsertManyRequest) (*InsertManyResponse, error)
	FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error)
	FindMany(context.Context, *FindManyRequest) (*FindManyResponse, error)
	UpdateOne(context.Context, *UpdateOneRequest) (*UpdateOneResponse, error)
	UpdateMany(context.Context, *UpdateManyRequest) (*UpdateManyResponse, error)
	DeleteOne(context.Context, *DeleteOneRequest) (*DeleteOneResponse, error)
	DeleteMany(context.Context, *DeleteManyRequest) (*DeleteManyResponse, error)
	ReplaceOne(context.Context, *ReplaceOneRequest) (*ReplaceOneResponse, error)
	UpsertOne(context.Context, *UpsertOneRequest) (*UpsertOneResponse, error)
	// Aggregation operations
	Aggregate(context.Context, *AggregateRequest) (*AggregateResponse, error)
	Count(context.Context, *CountRequest) (*CountResponse, error)
	Distinct(context.Context, *DistinctRequest) (*DistinctResponse, error)
	// Index management
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	DropIndex(context.Context, *DropIndexRequest) (*DropIndexResponse, error)
	ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error)
	// Batch operations
	BulkWrite(context.Context, *BulkWriteRequest) (*BulkWriteResponse, error)
	// Transaction support
	BeginTransaction(context.Context, *BeginTransactionRequest) (*BeginTransactionResponse, error)
	CommitTransaction(context.Context, *CommitTransactionRequest) (*CommitTransactionResponse, error)
	AbortTransaction(context.Context, *AbortTransactionRequest) (*AbortTransactionResponse, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentServiceServer struct{}

func (UnimplementedDocumentServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*CreateCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedDocumentServiceServer) DropCollection(context.Context, *DropCollectionRequest) (*DropCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedDocumentServiceServer) ListCollections(context.Context, *ListCollectionsRequest) (*ListCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollections not implemented")
}
func (UnimplementedDocumentServiceServer) GetCollectionInfo(context.Context, *GetCollectionInfoRequest) (*GetCollectionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionInfo not implemented")
}
func (UnimplementedDocumentServiceServer) InsertOne(context.Context, *InsertOneRequest) (*InsertOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOne not implemented")
}
func (UnimplementedDocumentServiceServer) InsertMany(context.Context, *InsertManyRequest) (*InsertManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertMany not implemented")
}
func (UnimplementedDocumentServiceServer) FindOne(context.Context, *FindOneRequest) (*FindOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOne not implemented")
}
func (UnimplementedDocumentServiceServer) FindMany(context.Context, *FindManyRequest) (*FindManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMany not implemented")
}
func (UnimplementedDocumentServiceServer) UpdateOne(context.Context, *UpdateOneRequest) (*UpdateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedDocumentServiceServer) UpdateMany(context.Context, *UpdateManyRequest) (*UpdateManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedDocumentServiceServer) DeleteOne(context.Context, *DeleteOneRequest) (*DeleteOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedDocumentServiceServer) DeleteMany(context.Context, *DeleteManyRequest) (*DeleteManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMany not implemented")
}
func (UnimplementedDocumentServiceServer) ReplaceOne(context.Context, *ReplaceOneRequest) (*ReplaceOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceOne not implemented")
}
func (UnimplementedDocumentServiceServer) UpsertOne(context.Context, *UpsertOneRequest) (*UpsertOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertOne not implemented")
}
func (UnimplementedDocumentServiceServer) Aggregate(context.Context, *AggregateRequest) (*AggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedDocumentServiceServer) Count(context.Context, *CountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedDocumentServiceServer) Distinct(context.Context, *DistinctRequest) (*DistinctResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Distinct not implemented")
}
func (UnimplementedDocumentServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedDocumentServiceServer) DropIndex(context.Context, *DropIndexRequest) (*DropIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedDocumentServiceServer) ListIndexes(context.Context, *ListIndexesRequest) (*ListIndexesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexes not implemented")
}
func (UnimplementedDocumentServiceServer) BulkWrite(context.Context, *BulkWriteRequest) (*BulkWriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkWrite not implemented")
}
func (UnimplementedDocumentServiceServer) BeginTransaction(context.Context, *BeginTransactionRequest) (*BeginTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedDocumentServiceServer) CommitTransaction(context.Context, *CommitTransactionRequest) (*CommitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTransaction not implemented")
}
func (UnimplementedDocumentServiceServer) AbortTransaction(context.Context, *AbortTransactionRequest) (*AbortTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortTransaction not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}
func (UnimplementedDocumentServiceServer) testEmbeddedByValue()                         {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DropCollection(ctx, req.(*DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_ListCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ListCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_ListCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ListCollections(ctx, req.(*ListCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetCollectionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetCollectionInfo(ctx, req.(*GetCollectionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_InsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).InsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_InsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).InsertOne(ctx, req.(*InsertOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_InsertMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).InsertMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_InsertMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).InsertMany(ctx, req.(*InsertManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_FindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).FindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_FindOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).FindOne(ctx, req.(*FindOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_FindMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).FindMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_FindMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).FindMany(ctx, req.(*FindManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_UpdateOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UpdateOne(ctx, req.(*UpdateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_UpdateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UpdateMany(ctx, req.(*UpdateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_DeleteOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DeleteOne(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DeleteMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DeleteMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_DeleteMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DeleteMany(ctx, req.(*DeleteManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_ReplaceOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ReplaceOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_ReplaceOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ReplaceOne(ctx, req.(*ReplaceOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_UpsertOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).UpsertOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_UpsertOne_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).UpsertOne(ctx, req.(*UpsertOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_Aggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).Aggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).Count(ctx, req.(*CountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_Distinct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistinctRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).Distinct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_Distinct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).Distinct(ctx, req.(*DistinctRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_DropIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).DropIndex(ctx, req.(*DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_ListIndexes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIndexesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).ListIndexes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_ListIndexes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).ListIndexes(ctx, req.(*ListIndexesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_BulkWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BulkWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BulkWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BulkWrite(ctx, req.(*BulkWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_BeginTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).BeginTransaction(ctx, req.(*BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_CommitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).CommitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_CommitTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).CommitTransaction(ctx, req.(*CommitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_AbortTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).AbortTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_AbortTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).AbortTransaction(ctx, req.(*AbortTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "document.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _DocumentService_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _DocumentService_DropCollection_Handler,
		},
		{
			MethodName: "ListCollections",
			Handler:    _DocumentService_ListCollections_Handler,
		},
		{
			MethodName: "GetCollectionInfo",
			Handler:    _DocumentService_GetCollectionInfo_Handler,
		},
		{
			MethodName: "InsertOne",
			Handler:    _DocumentService_InsertOne_Handler,
		},
		{
			MethodName: "InsertMany",
			Handler:    _DocumentService_InsertMany_Handler,
		},
		{
			MethodName: "FindOne",
			Handler:    _DocumentService_FindOne_Handler,
		},
		{
			MethodName: "FindMany",
			Handler:    _DocumentService_FindMany_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _DocumentService_UpdateOne_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _DocumentService_UpdateMany_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _DocumentService_DeleteOne_Handler,
		},
		{
			MethodName: "DeleteMany",
			Handler:    _DocumentService_DeleteMany_Handler,
		},
		{
			MethodName: "ReplaceOne",
			Handler:    _DocumentService_ReplaceOne_Handler,
		},
		{
			MethodName: "UpsertOne",
			Handler:    _DocumentService_UpsertOne_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _DocumentService_Aggregate_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _DocumentService_Count_Handler,
		},
		{
			MethodName: "Distinct",
			Handler:    _DocumentService_Distinct_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _DocumentService_CreateIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _DocumentService_DropIndex_Handler,
		},
		{
			MethodName: "ListIndexes",
			Handler:    _DocumentService_ListIndexes_Handler,
		},
		{
			MethodName: "BulkWrite",
			Handler:    _DocumentService_BulkWrite_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _DocumentService_BeginTransaction_Handler,
		},
		{
			MethodName: "CommitTransaction",
			Handler:    _DocumentService_CommitTransaction_Handler,
		},
		{
			MethodName: "AbortTransaction",
			Handler:    _DocumentService_AbortTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
